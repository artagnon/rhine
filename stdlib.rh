;; Absolute value of number
(defn abs [n] (if (< n 0) (* n -1) n))

;; Concats two strings
(defn concat [a b]
    (if (not (= [] a))
      (cons (first a) (concat (rest a) b))
      b))

;; Factorial
(defn factorial [n]
    (if (< n 2)
       n
       (* n (factorial (- n 1)))))

;; Decrement number by 1
(defn dec [n] (- n 1))

;; Increment number by 1
(defn inc [n] (+ n 1))

;; Return first n items of coll
(defn take [n coll]
    (if
       (and (> n 0) coll)
       (cons (first coll) (take (- n 1) (rest coll)))
       []))

;; Drop the first n items of coll
(defn drop [n coll]
   (if (and (> n 0) coll)
       (drop (dec n) (rest coll))
       coll))

;; Return the nth element of coll
(defn nth [n coll] (first (drop (dec n) coll)))


;; Returns the result of applying f to each element of coll
(defn map
  [f coll]
  (if coll
    (cons (f (first coll))
          (map f (rest coll)))
    []))

(defn map2
  [f c1 c2]
  (if (and c1 c2)
    (cons (f (first c1) (first c2))
          (map2 f (rest c1) (rest c2)))
    []))
